
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  skip,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions,
  warnOnce,
  defineDmmfProperty,
  Public,
  getRuntime,
  createParam,
} = require('@prisma/client/runtime/wasm-engine-edge.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.16.2
 * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
 */
Prisma.prismaVersion = {
  client: "6.16.2",
  engine: "1c57fdcd7e44b29b9313256c76699e91c3ac3c43"
}

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError
Prisma.PrismaClientInitializationError = PrismaClientInitializationError
Prisma.PrismaClientValidationError = PrismaClientValidationError
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag
Prisma.empty = empty
Prisma.join = join
Prisma.raw = raw
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = Extensions.getExtensionContext
Prisma.defineExtension = Extensions.defineExtension

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}





/**
 * Enums
 */
exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  name: 'name',
  passwordHash: 'passwordHash',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProjectScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  ownerId: 'ownerId',
  isPublic: 'isPublic',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.QuestionSetScalarFieldEnum = {
  id: 'id',
  projectId: 'projectId',
  name: 'name',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.QuestionScalarFieldEnum = {
  id: 'id',
  questionSetId: 'questionSetId',
  questionText: 'questionText',
  answerText: 'answerText',
  difficulty: 'difficulty',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.StudySessionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  questionSetId: 'questionSetId',
  startedAt: 'startedAt',
  completedAt: 'completedAt'
};

exports.Prisma.SessionAnswerScalarFieldEnum = {
  id: 'id',
  sessionId: 'sessionId',
  questionId: 'questionId',
  userRating: 'userRating',
  answeredAt: 'answeredAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.UserOrderByRelevanceFieldEnum = {
  email: 'email',
  name: 'name',
  passwordHash: 'passwordHash'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.ProjectOrderByRelevanceFieldEnum = {
  name: 'name',
  description: 'description'
};

exports.Prisma.QuestionSetOrderByRelevanceFieldEnum = {
  name: 'name',
  description: 'description'
};

exports.Prisma.QuestionOrderByRelevanceFieldEnum = {
  questionText: 'questionText',
  answerText: 'answerText'
};


exports.Prisma.ModelName = {
  User: 'User',
  Project: 'Project',
  QuestionSet: 'QuestionSet',
  Question: 'Question',
  StudySession: 'StudySession',
  SessionAnswer: 'SessionAnswer'
};
/**
 * Create the Client
 */
const config = {
  "generator": {
    "name": "client",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client-js"
    },
    "output": {
      "value": "/home/daispod/dev/learning-advisor/backend/node_modules/@prisma/client",
      "fromEnvVar": null
    },
    "config": {
      "engineType": "library"
    },
    "binaryTargets": [
      {
        "fromEnvVar": null,
        "value": "debian-openssl-3.0.x",
        "native": true
      }
    ],
    "previewFeatures": [],
    "sourceFilePath": "/home/daispod/dev/learning-advisor/backend/prisma/schema.prisma"
  },
  "relativeEnvPaths": {
    "rootEnvPath": null
  },
  "relativePath": "../../../prisma",
  "clientVersion": "6.16.2",
  "engineVersion": "1c57fdcd7e44b29b9313256c76699e91c3ac3c43",
  "datasourceNames": [
    "db"
  ],
  "activeProvider": "mysql",
  "postinstall": false,
  "inlineDatasources": {
    "db": {
      "url": {
        "fromEnvVar": "DATABASE_URL",
        "value": null
      }
    }
  },
  "inlineSchema": "// This is your Prisma schema file,\n// learn more about it in the docs: https://pris.ly/d/prisma-schema\n\ngenerator client {\n  provider = \"prisma-client-js\"\n}\n\ndatasource db {\n  provider = \"mysql\"\n  url      = env(\"DATABASE_URL\")\n}\n\nmodel User {\n  id           Int      @id @default(autoincrement())\n  email        String   @unique\n  name         String\n  passwordHash String   @map(\"password_hash\")\n  createdAt    DateTime @default(now()) @map(\"created_at\")\n  updatedAt    DateTime @updatedAt @map(\"updated_at\")\n\n  // Relations\n  projects      Project[]\n  studySessions StudySession[]\n\n  @@map(\"users\")\n}\n\nmodel Project {\n  id          Int      @id @default(autoincrement())\n  name        String\n  description String?  @db.Text\n  ownerId     Int      @map(\"owner_id\")\n  isPublic    Boolean  @default(false) @map(\"is_public\")\n  createdAt   DateTime @default(now()) @map(\"created_at\")\n  updatedAt   DateTime @updatedAt @map(\"updated_at\")\n\n  // Relations\n  owner        User          @relation(fields: [ownerId], references: [id], onDelete: Cascade)\n  questionSets QuestionSet[]\n\n  @@map(\"projects\")\n}\n\nmodel QuestionSet {\n  id          Int      @id @default(autoincrement())\n  projectId   Int      @map(\"project_id\")\n  name        String\n  description String?  @db.Text\n  createdAt   DateTime @default(now()) @map(\"created_at\")\n  updatedAt   DateTime @updatedAt @map(\"updated_at\")\n\n  // Relations\n  project       Project        @relation(fields: [projectId], references: [id], onDelete: Cascade)\n  questions     Question[]\n  studySessions StudySession[]\n\n  @@map(\"question_sets\")\n}\n\nmodel Question {\n  id            Int      @id @default(autoincrement())\n  questionSetId Int      @map(\"question_set_id\")\n  questionText  String   @map(\"question_text\") @db.Text\n  answerText    String?  @map(\"answer_text\") @db.Text\n  difficulty    Int?     @default(1) // 1-5 scale\n  createdAt     DateTime @default(now()) @map(\"created_at\")\n  updatedAt     DateTime @updatedAt @map(\"updated_at\")\n\n  // Relations\n  questionSet    QuestionSet     @relation(fields: [questionSetId], references: [id], onDelete: Cascade)\n  sessionAnswers SessionAnswer[]\n\n  @@map(\"questions\")\n}\n\nmodel StudySession {\n  id            Int       @id @default(autoincrement())\n  userId        Int       @map(\"user_id\")\n  questionSetId Int       @map(\"question_set_id\")\n  startedAt     DateTime  @default(now()) @map(\"started_at\")\n  completedAt   DateTime? @map(\"completed_at\")\n\n  // Relations\n  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)\n  questionSet    QuestionSet     @relation(fields: [questionSetId], references: [id], onDelete: Cascade)\n  sessionAnswers SessionAnswer[]\n\n  @@map(\"study_sessions\")\n}\n\nmodel SessionAnswer {\n  id         Int      @id @default(autoincrement())\n  sessionId  Int      @map(\"session_id\")\n  questionId Int      @map(\"question_id\")\n  userRating Int      @map(\"user_rating\") // 1-5 scale\n  answeredAt DateTime @default(now()) @map(\"answered_at\")\n\n  // Relations\n  session  StudySession @relation(fields: [sessionId], references: [id], onDelete: Cascade)\n  question Question     @relation(fields: [questionId], references: [id], onDelete: Cascade)\n\n  @@map(\"session_answers\")\n}\n",
  "inlineSchemaHash": "eb044f434dc7863ad04f29fc77902d0610e576a7b317724fd18a6d5d17f88fb8",
  "copyEngine": true
}
config.dirname = '/'

config.runtimeDataModel = JSON.parse("{\"models\":{\"User\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"email\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"passwordHash\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"password_hash\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"created_at\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"updated_at\"},{\"name\":\"projects\",\"kind\":\"object\",\"type\":\"Project\",\"relationName\":\"ProjectToUser\"},{\"name\":\"studySessions\",\"kind\":\"object\",\"type\":\"StudySession\",\"relationName\":\"StudySessionToUser\"}],\"dbName\":\"users\"},\"Project\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"ownerId\",\"kind\":\"scalar\",\"type\":\"Int\",\"dbName\":\"owner_id\"},{\"name\":\"isPublic\",\"kind\":\"scalar\",\"type\":\"Boolean\",\"dbName\":\"is_public\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"created_at\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"updated_at\"},{\"name\":\"owner\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"ProjectToUser\"},{\"name\":\"questionSets\",\"kind\":\"object\",\"type\":\"QuestionSet\",\"relationName\":\"ProjectToQuestionSet\"}],\"dbName\":\"projects\"},\"QuestionSet\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"projectId\",\"kind\":\"scalar\",\"type\":\"Int\",\"dbName\":\"project_id\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"created_at\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"updated_at\"},{\"name\":\"project\",\"kind\":\"object\",\"type\":\"Project\",\"relationName\":\"ProjectToQuestionSet\"},{\"name\":\"questions\",\"kind\":\"object\",\"type\":\"Question\",\"relationName\":\"QuestionToQuestionSet\"},{\"name\":\"studySessions\",\"kind\":\"object\",\"type\":\"StudySession\",\"relationName\":\"QuestionSetToStudySession\"}],\"dbName\":\"question_sets\"},\"Question\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"questionSetId\",\"kind\":\"scalar\",\"type\":\"Int\",\"dbName\":\"question_set_id\"},{\"name\":\"questionText\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"question_text\"},{\"name\":\"answerText\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"answer_text\"},{\"name\":\"difficulty\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"created_at\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"updated_at\"},{\"name\":\"questionSet\",\"kind\":\"object\",\"type\":\"QuestionSet\",\"relationName\":\"QuestionToQuestionSet\"},{\"name\":\"sessionAnswers\",\"kind\":\"object\",\"type\":\"SessionAnswer\",\"relationName\":\"QuestionToSessionAnswer\"}],\"dbName\":\"questions\"},\"StudySession\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"Int\",\"dbName\":\"user_id\"},{\"name\":\"questionSetId\",\"kind\":\"scalar\",\"type\":\"Int\",\"dbName\":\"question_set_id\"},{\"name\":\"startedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"started_at\"},{\"name\":\"completedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"completed_at\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"StudySessionToUser\"},{\"name\":\"questionSet\",\"kind\":\"object\",\"type\":\"QuestionSet\",\"relationName\":\"QuestionSetToStudySession\"},{\"name\":\"sessionAnswers\",\"kind\":\"object\",\"type\":\"SessionAnswer\",\"relationName\":\"SessionAnswerToStudySession\"}],\"dbName\":\"study_sessions\"},\"SessionAnswer\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"sessionId\",\"kind\":\"scalar\",\"type\":\"Int\",\"dbName\":\"session_id\"},{\"name\":\"questionId\",\"kind\":\"scalar\",\"type\":\"Int\",\"dbName\":\"question_id\"},{\"name\":\"userRating\",\"kind\":\"scalar\",\"type\":\"Int\",\"dbName\":\"user_rating\"},{\"name\":\"answeredAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"answered_at\"},{\"name\":\"session\",\"kind\":\"object\",\"type\":\"StudySession\",\"relationName\":\"SessionAnswerToStudySession\"},{\"name\":\"question\",\"kind\":\"object\",\"type\":\"Question\",\"relationName\":\"QuestionToSessionAnswer\"}],\"dbName\":\"session_answers\"}},\"enums\":{},\"types\":{}}")
defineDmmfProperty(exports.Prisma, config.runtimeDataModel)
config.engineWasm = {
  getRuntime: async () => require('./query_engine_bg.js'),
  getQueryEngineWasmModule: async () => {
    const loader = (await import('#wasm-engine-loader')).default
    const engine = (await loader).default
    return engine
  }
}
config.compilerWasm = undefined

config.injectableEdgeEnv = () => ({
  parsed: {
    DATABASE_URL: typeof globalThis !== 'undefined' && globalThis['DATABASE_URL'] || typeof process !== 'undefined' && process.env && process.env.DATABASE_URL || undefined
  }
})

if (typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined) {
  Debug.enable(typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined)
}

const PrismaClient = getPrismaClient(config)
exports.PrismaClient = PrismaClient
Object.assign(exports, Prisma)

